module.exports = function(options){
	return (function(opts){
		opts = opts || {};
		opts.reapInterval = opts.reapInterval || 60000 * 10;

		var store = []
		,	terminateSession = opts.terminate || function(id){
				if(store[id]){
					clearTimeout(store[id].timeout);
					delete store[id];
				}
			}
		,	touchId = opts.touch || function(id){
				if(store[id]){
					clearTimeout(store[id].timeout);
				}else{
					store[id] = {};
				}
				store[id].timeout = setTimeout(function(){
						terminateSession(id);
					}, opts.reapInterval);
			}
		,	save = opts.save || function(obj){
				touchId(obj.userId);
				store[obj.userId].value = obj.hash;
			}
		,	retrieve = opts.retrieve || function(id){
				if(!store[id]){
					return null;
				}else{
					touchId(id);
					return store[id].value;
				}
			};		
		
		function killCookie(res){
			res.cookie("logged-user-id", "This bastard expires here and now!", { maxAge: -10000, httpOnly: true });
		}
		
		return {
			get: retrieve
		,	set: save
		,	authenticate: function(req, res, next){
			var cookie = req.cookies["logged-user-id"];
				if(cookie){
					if(cookie.hash === retrieve(cookie.userId)){
						req.logged = true;
					}else{
						req.logged = false;
						killCookie(res);
					}
				}else{
					req.logged = false;
				}
				next();
			}
		,	newSession: function(id, hash, res){
				var obj = { userId: id, hash: hash };
				save(obj);
				res.cookie("logged-user-id", obj, { expires: false, httpOnly: true });
			}
		,	endSession: function(req, res){
				var cookie = req.cookies["logged-user-id"];
				if(cookie){
					terminateSession(cookie.userId);
					killCookie(res);
				}
				return cookie.userId;
			}
		};
	})(options);
};