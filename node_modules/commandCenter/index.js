/**	Commander.js
			To start just do:

				var commander = require("commander")({
					prompt: "whatever you say> " (default to "$ ")
				});
				commander({
					"start": function(args, pass){ ... }
				,	"callNASA": function(args, pass){ ... }
				,	"showButterflies": function(args, pass){ ... }
				...
				});
	
			The idea is to do something with args, being array of typed words	and pass() control resulting in prompting for another command. You can also link commands with && || , ; operators and use & as last argument for asynchronous execution. You can also use arithmetic operators.
			
			Also, there are system commands available, either written as string, e.g.
				$ "ls -l"
			or
				$ exec "ls -l"
			However, current path isn't changed, because everything happens in a separate, specially created for every process, so if you need to do something using file system keep in mind that using cd first might be a good idea.
	*/
module.exports = function(opts){
	opts = opts || {};
	opts.prompt = opts.prompt || "$ ";
	
	var stdin = process.stdin
		,	env = process.env
		,	stdinUtils = require("stdinUtils")
		,	exec = require("child_process").exec
		,	stdCmds = {
				"exit": function(args, pass){
					process.exit(0);
				}
			,	"chprompt": function(args, pass){
					if(args[1]){
						opts.prompt = args[1];
					}else{
						throw new Error("Give me some prompt darling");
					}
					pass(true);
				}
			,	"sleep": function(args, pass){console.log(args);
					var time = ~~args[1];
					if(time){
						setTimeout(function(){
							pass(true);
						}, time);
					}else{
						throw new Error("I can't sleep, if you can't write, so simple");
					}
				}
			, "echo": function(args, pass){
					args = args.slice(1).join(" ");
					pass(args);
				}
			,	"exec": function(args, pass){
					var i;
					if(args[0] != "exec"){
						i = 0;
					}else{
						i = 1;
					}
					exec(args[i], function(err, stdout, stderr){
						if(err){
							console.log(err);
							console.log(stderr);
							pass(false);
						}else{
							pass(stdout);
						}
					});
				}
			,	"pwd": function(args, pass){
					opts.cmds.exec([ "exec", "echo %CD%" ], pass);
				}
			};
	
	function start(commands){
		if(!env.__COMMANDER_RUNNING){
			env.__COMMANDER_RUNNING = true;
			
			if(typeof commands == "object"){
				stdin.setEncoding("utf8");
				opts.cmds = commands;
				setStdCmds();
				require("./lib/parser")(opts)("Hello!");
			}else{
				throw new Error("Passed commands parameter is not an object as it should be.");
			}
		}else{
			throw new Error("Commander.js is already running!");
		}
	};
	
	function restart(commands){
		env.__COMMANDER_RUNNING = false;
		stdin.pause();
		if(commands){
			opts.cmds = commands;
			setStdCmds();
		}
		start(opts.cmds);
	};
	
	function setStdCmds(){
		Object.keys(stdCmds).forEach(function(cmd){
			opts.cmds[cmd] = stdCmds[cmd];
		});
	}
	
	function execCmd(args, cb){
		opts.cmds[args[0]](args, cb);
	}
	
	return {
		start: start
	,	getLine: stdinUtils.getLine
	,	getPassword: stdinUtils.getPassword
	,	restart: restart
	,	exec: stdCmds.exec
	,	execCmd: execCmd
	};
};
