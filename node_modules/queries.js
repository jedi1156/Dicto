module.exports = (function(){
	var queries = {
		createDicto: "CREATE DATABASE Dicto;"
	,	createWords: "CREATE TABLE words (word VARCHAR(40), type VARCHAR(4), explanation VARCHAR(10000), pronunciation VARCHAR(20), chapter INT, important BOOL, learnt BOOL);"
	,	createUsers: "CREATE TABLE users (user VARCHAR(60), passHash VARCHAR(256), salt VARCHAR(64));"
	,	user: "SELECT * FROM users WHERE user="
	,	insertUser: "INSERT INTO users (user,passHash,salt) VALUE "
	,	deleteUser: "DELETE FROM users WHERE user="
	,	chapter: "SELECT * FROM words WHERE chapter"
	,	word: "SELECT * FROM words WHERE word"
	, insertWord: "INSERT INTO words (word,type,explanation,pronunciation,chapter,important,learnt) VALUE "
	,	deleteWord: "DELETE FROM words WHERE word="
	,	learnt: "learnt=TRUE"
	,	notLearnt: "learnt=FALSE"
	, important: "important=TRUE"
	, notImportant: "important=FALSE"
	,	all: "SELECT * FROM words"
	,	orderByWord: " ORDER BY word"
	};
	
	function quoteString(str){
		return "'" + str.replace("\'", "\\\'").replace("\"", "\\\"") + "'";
	}
	
	function concatOptions(opt1, opt2){
		if(opt1 === ""){
			return opt2;
		}else if(opt2 === ""){
			return opt1;
		}else{
			return opt1 + " AND " + opt2;
		}
	}
	
	function getOptions(body){
		var qry;
		if(body.learnt === "0"){
			qry = queries.notLearnt;
		}else if(body.learnt != null){
			qry = queries.learnt;
		}else{
			qry = "";
		}
		
		if(body.important === "0"){
			qry = concatOptions(qry, queries.notImportant);
		}else if(body.important != null){
			qry = concatOptions(qry, queries.important);
		}
		
		return qry;
	}
	
	function arrToQuote(arr, unquoted){
		var res = []
			,	i;
		for(i = 0; i < arr.length; ++i){
			res[i] = quoteString(arr[i]);
		}
		if(unquoted != null){
			res = res.concat(unquoted);
		}
		return res.join();
	}
	
	function insertQuery(word){
		var fieldArr = arrToQuote([word.word, word.type, word.explanation, word.pronunciation],
			[~~word.chapter, ~~word.important, ~~word.learnt]);

		return queries.insertWord + "(" + fieldArr + ");";
	}

	function chapterQuery(body){
		var qry;
		if(body.to == null || body.to === body.from){
			qry = queries.chapter + "=" + body.from;
		}else{
			qry = queries.chapter + ">=" + body.from + " AND chapter<=" + body.to;
		}
		return concatOptions(qry, getOptions(body)) + queries.orderByWord + ";";
	}
	
	function wordQuery(word){
		return queries.word + "=" + quoteString(word) + ";";
	}
	
	function topQuery(word, limit){
		return queries.word + " LIKE " + quoteString("%" + word + "%") + " ORDER BY POSITION(" + quoteString(word) + " IN word)" + " LIMIT " + limit + ";";
	}
	
	function deleteQuery(word){
		return queries.deleteWord + quoteString(word) + ";";
	}
	
	function allQuery(body){
		var qry = getOptions(body);
		if(qry === ""){
			qry = queries.all;
		}else{
			qry = queries.all + " WHERE " + qry;
		}
		qry += queries.orderByWord + ";";
		return qry;
	}
	
	function getUser(userId){
		return queries.user + quoteString(userId) + ";";
	}
	
	function insertUser(userId, password, salt){
		return queries.insertUser + "(" + arrToQuote([userId, password, salt]) + ");";
	}
	
	function deleteUser(userId){
		return queries.deleteUser + quoteString(userId) + ";";
	}
	
	return {
		createDicto: function(){return queries.createDicto;}
	,	createWords: function(){return queries.createWords;}
	,	createUsers: function(){return queries.createUsers;}
	,	getUser: getUser
	,	insertUser: insertUser
	,	delUser: deleteUser
	,	insert: insertQuery
	,	word: wordQuery
	,	top: function(wrd){return topQuery(wrd, 20);}
	,	chapter: chapterQuery
	,	del: deleteQuery
	,	all: allQuery
	};
})();