module.exports = (function(){
	var queries = {
		createDicto: "CREATE DATABASE Dicto;"
	,	createWords: "CREATE TABLE words (word VARCHAR(300), type VARCHAR(20), explanation VARCHAR(10000), pronunciation VARCHAR(50), chapter INT, important BOOL, learnt BOOL);"
	,	createUsers: "CREATE TABLE users (user VARCHAR(60), passHash VARCHAR(256), salt VARCHAR(64));"
	,	user: "SELECT * FROM users WHERE user="
	,	insertUser: "INSERT INTO users (user,passHash,salt) VALUE "
	,	deleteUser: "DELETE FROM users WHERE user="
	,	word: "SELECT * FROM words WHERE word"
	,	expl: "SELECT * FROM words WHERE explanation"
	, insertWord: "INSERT INTO words (word,type,explanation,pronunciation,chapter,important,learnt) VALUE "
	,	deleteWord: "DELETE FROM words WHERE word="
	,	learnt: "learnt=TRUE"
	,	notLearnt: "learnt=FALSE"
	, important: "important=TRUE"
	, notImportant: "important=FALSE"
	,	type: "type="
	,	general: "SELECT * FROM words"
	,	orderByWord: " ORDER BY word"
	};
	
	function quoteString(str, opts){
		str =  str.replace(/'/g, "\\\'").replace(/"/g, "\\\"").replace(/_/g, "\\_").replace(/%/g, "\\%");
		opts = opts || {};
		opts.pre = opts.pre || "";
		opts.post = opts.post || "";
		
		opts.pre = "'" + opts.pre;
		opts.post += "'";
		return opts.pre + str + opts.post;
	}
	
	function concatOptions(str1, str2, opts){
		if(str1 === ""){
			return str2;
		}else if(str2 === ""){
			return str1;
		}else{
			opts = opts || {};
			opts.operator = opts.operator || "AND";
			
			str1 = [str1, opts.operator, str2].join(" ");
			if(opts.brackets){
				str1 = "(" + str1 + ")";
			}
			
			return str1;
		}
	}
	
	function getOptions(body){
		var qry;
		if(body.learnt === "0"){
			qry = queries.notLearnt;
		}else if(body.learnt != null){
			qry = queries.learnt;
		}else{
			qry = "";
		}
		
		if(body.important === "0"){
			qry = concatOptions(qry, queries.notImportant);
		}else if(body.important != null){
			qry = concatOptions(qry, queries.important);
		}
		
		if(body.type){
			qry = concatOptions(qry, queries.type + quoteString(body.type));
		}
		
		return qry;
	}
	
	function arrToQuote(arr, unquoted){
		var res = []
			,	i;
		for(i = 0; i < arr.length; ++i){
			res[i] = quoteString(arr[i]);
		}
		if(unquoted != null){
			res = res.concat(unquoted);
		}
		return res.join();
	}
	
	function insertQuery(word){
		var fieldArr = arrToQuote([word.word, word.type, word.explanation, word.pronunciation],
			[~~word.chapter, ~~word.important, ~~word.learnt]);
		return queries.insertWord + "(" + fieldArr + ");";
	}
	
	function minificateChapters(arr){
		var i
			,	j;
		
		arr = arr || [];
		
		if(arr.length){
			arr = arr.sort(function(a, b){
				if(a[0] === b[0]){
					if(a.length === 2 && b.length === 2){
						return a[1] - b[1];
					}else{
						return a.length - b.length;
					}
				}else{
					return a[0] - b[0];
				}
			});

			if(arr[0].length === 1){
				arr[0][1] = arr[0][0];
			}
			for(i = 0, j = 1; j < arr.length;){
				if(arr[j].length === 1){
					arr[j][1] = arr[j][0];
				}
				if(arr[i][1] + 1 >= arr[j][0]){
					arr[i] = [
						Math.min(arr[i][0], arr[j][0])
					,	Math.max(arr[i][1], arr[j][1])
					];
					arr.splice(j, 1);
				}else{
					i += 1;
					j += 1;
				}
			}
		}

		return arr;
	}
	
	var controlChapters = (function(){
		function compFunc(a, b){
			return a - b;
		}

		return function(arr){
			var i;
			
			for(i = 0; i < arr.length; ++i){
				arr[i].sort(compFunc);
			}
			
			return minificateChapters(arr);
		}
	})();
	
	function arrToChapters(arr){
		var i
			,	chaps = []
			,	and = { brackets: true }
			,	prop = "chapter";
		
		if(!arr){
			return "";
		}
		
		if(typeof arr === "string"){
			arr = JSON.parse(arr);
		}
		
		arr = controlChapters(arr);
		
		for(i = 0; i < arr.length; ++i){
			if(arr[i][0] === arr[i][1]){
				chaps.push(prop + "=" + arr[i][0]);
			}else{
				chaps.push(concatOptions(prop + ">=" + arr[i][0], prop + "<=" + arr[i][1], and));
			}
		}
		
		switch(chaps.length){
			case 0:
				return "";
			case 1:
				return chaps[0].replace(/[\(\)]/g, "");
			default:
				chaps = "(" + chaps.join(" OR ") + ")";
				return chaps;
		}
	}

	function chapterQuery(body){
		var qry = "";
		if(body.chapters !== "all"){
			qry = arrToChapters(body.chapters);
		}
		qry = concatOptions(getOptions(body), qry);

		return concatOptions(queries.general, qry, { operator: "WHERE" }) + queries.orderByWord + ";";
	}
	
	function wordQuery(word){
		return queries.word + "=" + quoteString(word) + ";";
	}
	
	function topQuery(word, limit){
		return queries.word + " LIKE " + quoteString(word, { pre: "%", post: "%" }) + " ORDER BY POSITION(" + quoteString(word) + " IN word) DESC, word" + " LIMIT " + limit + ";";
	}
	
	function explQuery(word, limit){
		return queries.expl + " LIKE " + quoteString(word, { pre: "%", post: "%" }) + " ORDER BY POSITION(" + quoteString(word) + " IN explanation) DESC, word" + " LIMIT " + limit + ";";
	}
	
	function deleteQuery(word){
		return queries.deleteWord + quoteString(word) + ";";
	}
	
	function getUser(userId){
		return queries.user + quoteString(userId) + ";";
	}
	
	function insertUser(userId, password, salt){
		return queries.insertUser + "(" + arrToQuote([userId, password, salt]) + ");";
	}
	
	function deleteUser(userId){
		return queries.deleteUser + quoteString(userId) + ";";
	}
	
	return {
		createDicto: function(){return queries.createDicto;}
	,	createWords: function(){return queries.createWords;}
	,	createUsers: function(){return queries.createUsers;}
	,	getUser: getUser
	,	insertUser: insertUser
	,	delUser: deleteUser
	,	insert: insertQuery
	,	word: wordQuery
	,	top: topQuery
	,	expl: explQuery
	,	chapter: chapterQuery
	,	del: deleteQuery
	};
})();
