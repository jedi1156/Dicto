/**
	Parses the parameters from url to json:
	
	domain/path?param_1=value_1&param_2=value_2&param_3=value_3&...&param_n=value_n
	
	{
		param_1: value_1
	,	param_2: value_2
	,	param_3: value_3
	...
	,	param_n: value_n
	}
	
	
	Use like this:
	
	> urlParams.register(the_url)
	// returns: /the_url?params/
	
	and now:
	
	> urlParams(the_url)
	// returns: appropriate middleware function that sets
	// req.body.urlParams = parsedJson
	
	Works with express params. Dirty hack, that's what it is!
*/

module.exports = (function(app){
	var my
		,	reg = {}
		,	paramRegExp = /:([^\/?]+)/;

	function addParamsToPath(str){
		var par
			,	theReg = reg[str] = {};
		theReg.params = [];
		
		while(par = paramRegExp.exec(str)){
			theReg.params.push(par[1]);
			str = str.replace(paramRegExp, "([^\/?]+)");
		}

		return theReg.regExp = RegExp("^" + str.replace(/\//g, "\\\/") + "?([^\/]*)$");
	}

	function parseGetJSON(str){
		var i
			,	json = {};

		if(str[0] === "?"){
			str = str.slice(1);
		}
		str = str.split("&");
		
		for(i = 0; i < str.length; ++i){
			str[i] = str[i].split("=");
			json[str[i][0]] = str[i][1]
		}
		return json;
	}

	function createFunc(str){
		var theReg = reg[str]
			,	regexp = theReg.regExp
			,	params = [getJsonMiddleware]
			,	i
			,	j
			,	len
			,	len2
			,	par
			,	appPar;

		if(theReg.params.length && app && app._router){
			appPar = app._router.params;
			for(i = 0, len = theReg.params.length; i < len; ++i){
				par = theReg.params[i];
				if(appPar[par]){
					for(j = 0, len2 = appPar[par].length; j < len2; ++j){
						params.push((function(){
							var _ic = i + 1
								,	_par = par
								,	_j = j;

							return function(req, res, next){
									appPar[_par][_j](req, res, next, req.body.urlComps[_ic]);
							};
						})());
					}
				}
			}
		}
		
		return params;
		
		function getJsonMiddleware(req, res, next){
			req.body.urlComps = regexp.exec(unescape(req.url));
			req.body.urlParams = parseGetJSON(req.body.urlComps[req.body.urlComps.length - 1]);
			next();
		};
	}
	
	my = function(str){
		if(reg[str]){
			return reg[str].func || defaultFunc;
		}
		return function defaultFunc(req, res, next){
			console.log(str + " is not registered! Passing control");
			next();
		};
	}
	
	my.register = function(str){
		if(reg[str] && (!reg.hasOwnProperty(str) || typeof reg[str] == "function")){
			throw new Error("You can't register this path! The word " + str + " is restricted or is a function!");
		}
		addParamsToPath(str);

		reg[str].func = createFunc(str);

		return reg[str].regExp;
	};
	
	return my;
});