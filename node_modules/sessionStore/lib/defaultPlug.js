module.exports = function(opts){
	opts = opts || {};
	var myStore = {}
		,	my
		,	reapInterval = opts.reapInterval;
	
	if(typeof reapInterval != "number"
	|| isNaN(reapInterval)){
		reapInterval = 60000 * 10;
	}

	my = {
		set: function(obj, callback){
			callback = callback || function(){};
			touch(obj.userId);
			myStore[obj.userId].value = obj.hash;
			callback();
		}
	,	get: function(userId, callback){
			var obj = retrieve(userId)
				,	arg;
			callback = callback || function(){};
			if(!obj){
				arg = null;
			}else{
				arg = obj.value;
			}
			callback(arg);
		}
	,	del: function(userId, callback){
			callback = callback || function(){};
			if(retrieve(userId)){
				clearTimeout(myStore[userId].timeout);
				delete myStore[userId];
			}
			callback();
		}
	,	touch: touch
	,	clear: function(callback){
			var i;
			callback = callback || function(){};
			if(reapInterval > 0){
				for(i in myStore){
					if(retrieve(i) && typeof myStore(i) == "object"){
						clearTimeout(myStore[i].timeout);
					}
				}
			}
			myStore = {};
			callback();
		}
	}
	
	return my;
	
	function retrieve(userId){
		if(Object.hasOwnProperty.call(myStore, userId)){
			return myStore[userId];
		}else{
			return null;
		}
	}
	
	function touch(userId, callback){
		var obj = retrieve(userId);
		callback = callback || function(){};
		if(!obj){
			myStore[userId] = {};
		}
		if(reapInterval > 0){
			if(obj){
				clearTimeout(myStore[userId].timeout);
			}
			myStore[userId].timeout = setTimeout(function(){
				my.del(userId);
			}, reapInterval);
		}
		callback();
	}
};
