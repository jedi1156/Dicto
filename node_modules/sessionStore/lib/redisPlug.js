module.exports = function(opts){
	var redis = require("redis")
		,	db = opts.db || 2
		,	reapInterval = Math.ceil(opts.reapInterval / 1000) || 60 * 10
		,	expire
		,	touch;
	
	function createClient(callback){
		var client = redis.createClient();
		callback = callback || function(){};
		client.select(db, function(){
			callback(client);
		});
	}
	
	function destroyClient(client){
		client.quit();
	}
	
	if(reapInterval > 0){
		expire = function(client, userId){
			client.expire(userId, reapInterval, function(err, res){
				destroyClient(client);
			});
		};
		
		touch = function(userId, callback){
			callback = callback || function(){};
			createClient(function(client){
				expire(client, userId);
				callback();
			});
		};
	}else{
		expire = function(client, userId){
			destroyClient(client);
		};
		
		touch = function(userId, callback){
			callback = callback || function(){};
			callback();
		};
	}
	
	function set(obj, callback){
		callback = callback || function(){};
		createClient(function(client){
			client.set(obj.userId, obj.hash, function(err, res){
				expire(client, obj.userId);
				callback();
			});
		});
	}

	function clear(callback){
		callback = callback || function(){};
		createClient(function(client){
			client.flushdb(function(err, res){
				destroyClient(client);
				callback();
			});
		});
	}
	
	function get(userId, callback){
		callback = callback || function(){};
		createClient(function(client){
			client.get(userId, function(err, res){
				destroyClient(client);
				callback(res);
			});
		});
	}
	
	function del(userId, callback){
		callback = callback || function(){};
		createClient(function(client){
			client.del(userId, function(err, res){
				destroyClient(client);
				callback();
			});
		});
	}
	
	return {
		set: set
	,	get: get
	,	del: del
	,	touch: touch
	,	clear: clear
	};
};
